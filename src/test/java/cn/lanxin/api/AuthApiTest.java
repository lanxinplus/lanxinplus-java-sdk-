/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiException;
import cn.lanxin.models.V1AppTokenCreateResponse;
import cn.lanxin.models.V1JsApiTokenCreateResponse;
import cn.lanxin.models.V1UserTokenCreateResponse;
import cn.lanxin.models.V1UsersFetchResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * 获取应用访问TOKEN
     *
     * 使用AppId，AppSecret，创建应用访问APP_TOKEN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AppTokenCreateTest() throws ApiException {
        String grantType = null;
        String appid = null;
        String secret = null;
        V1AppTokenCreateResponse response = api.v1AppTokenCreate(grantType, appid, secret);

        // TODO: test validations
    }
    
    /**
     * 获取jsapi访问TOKEN
     *
     * 创建JSAPI访问JS_API_TOKEN，该JS_API_TOKEN用于生成JASPI签名参数，用于JSAPI接口的身份验证
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1JsApiTokenCreateTest() throws ApiException {
        String appToken = null;
        String userToken = null;
        V1JsApiTokenCreateResponse response = api.v1JsApiTokenCreate(appToken, userToken);

        // TODO: test validations
    }
    
    /**
     * 获取人员访问TOKEN
     *
     * OAuth2 授权流程，通过 OAuth2 授权码获取人员身份访问USER_TOKEN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1UserTokenCreateTest() throws ApiException {
        String appToken = null;
        String grantType = null;
        String code = null;
        String redirectUri = null;
        V1UserTokenCreateResponse response = api.v1UserTokenCreate(appToken, grantType, code, redirectUri);

        // TODO: test validations
    }
    
    /**
     * 获取人员基本信息
     *
     * 根据人员token 获取当前端上登录人员信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1UsersFetchTest() throws ApiException {
        String appToken = null;
        String userToken = null;
        V1UsersFetchResponse response = api.v1UsersFetch(appToken, userToken);

        // TODO: test validations
    }
    
}

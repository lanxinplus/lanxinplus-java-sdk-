/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.models;

import java.util.Objects;
import java.util.Arrays;
import cn.lanxin.models.PushData;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Event
 */

public class Event {
  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channelType";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private Integer channelType;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private Integer deviceType;

  public static final String SERIALIZED_NAME_ENTRY_ID = "entryId";
  @SerializedName(SERIALIZED_NAME_ENTRY_ID)
  private String entryId;

  public static final String SERIALIZED_NAME_EVENT_DATA = "eventData";
  @SerializedName(SERIALIZED_NAME_EVENT_DATA)
  private String eventData;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Integer expires;

  public static final String SERIALIZED_NAME_PUSH_DATA = "pushData";
  @SerializedName(SERIALIZED_NAME_PUSH_DATA)
  private PushData pushData;

  public static final String SERIALIZED_NAME_RECEIVER_IDS = "receiverIds";
  @SerializedName(SERIALIZED_NAME_RECEIVER_IDS)
  private List<String> receiverIds = null;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;


  public Event channelType(Integer channelType) {
    
    this.channelType = channelType;
    return this;
  }

   /**
   * 通道类型
   * @return channelType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "通道类型")

  public Integer getChannelType() {
    return channelType;
  }


  public void setChannelType(Integer channelType) {
    this.channelType = channelType;
  }


  public Event deviceType(Integer deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

   /**
   * 推送的目标设备类型：1: android, 2: ios, 4: windows, 8: mac, 16: linux 类似于channelType字段，该字段也支持或运算符( | )。如果不填或者将该字段置0， 那么开平会将该事件推送到所有的登录设备。
   * @return deviceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "推送的目标设备类型：1: android, 2: ios, 4: windows, 8: mac, 16: linux 类似于channelType字段，该字段也支持或运算符( | )。如果不填或者将该字段置0， 那么开平会将该事件推送到所有的登录设备。")

  public Integer getDeviceType() {
    return deviceType;
  }


  public void setDeviceType(Integer deviceType) {
    this.deviceType = deviceType;
  }


  public Event entryId(String entryId) {
    
    this.entryId = entryId;
    return this;
  }

   /**
   * 应用的入口ID（主要用于微应用）
   * @return entryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "应用的入口ID（主要用于微应用）")

  public String getEntryId() {
    return entryId;
  }


  public void setEntryId(String entryId) {
    this.entryId = entryId;
  }


  public Event eventData(String eventData) {
    
    this.eventData = eventData;
    return this;
  }

   /**
   * 事件内容，系统预定义的事件-工作台角标参数参见下面数据类型与数据格式定义。对应用自定义事件，此内容由应用服务端与应用客户端沟通协商确定，蓝信开放平台不关心具体内容。
   * @return eventData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "事件内容，系统预定义的事件-工作台角标参数参见下面数据类型与数据格式定义。对应用自定义事件，此内容由应用服务端与应用客户端沟通协商确定，蓝信开放平台不关心具体内容。")

  public String getEventData() {
    return eventData;
  }


  public void setEventData(String eventData) {
    this.eventData = eventData;
  }


  public Event eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * 事件类型，目前支持的系统预定义事件有工作台红点:app_changes。 对应用自定义事件数据类型拼接的建议规则 “应用type_场景type_场景Id(openid)” 应用自定义类型，应用内区分不同的事件类型，由应用自行决定具体值（接口透传该值）。
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "事件类型，目前支持的系统预定义事件有工作台红点:app_changes。 对应用自定义事件数据类型拼接的建议规则 “应用type_场景type_场景Id(openid)” 应用自定义类型，应用内区分不同的事件类型，由应用自行决定具体值（接口透传该值）。")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public Event expires(Integer expires) {
    
    this.expires = expires;
    return this;
  }

   /**
   * 事件的过期时间，单位是秒。默认值为0是表示永不过期。如果设置指定过期时间（非0），则应用需要实现事件拉取的回调接口。
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "事件的过期时间，单位是秒。默认值为0是表示永不过期。如果设置指定过期时间（非0），则应用需要实现事件拉取的回调接口。")

  public Integer getExpires() {
    return expires;
  }


  public void setExpires(Integer expires) {
    this.expires = expires;
  }


  public Event pushData(PushData pushData) {
    
    this.pushData = pushData;
    return this;
  }

   /**
   * Get pushData
   * @return pushData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PushData getPushData() {
    return pushData;
  }


  public void setPushData(PushData pushData) {
    this.pushData = pushData;
  }


  public Event receiverIds(List<String> receiverIds) {
    
    this.receiverIds = receiverIds;
    return this;
  }

  public Event addReceiverIdsItem(String receiverIdsItem) {
    if (this.receiverIds == null) {
      this.receiverIds = new ArrayList<String>();
    }
    this.receiverIds.add(receiverIdsItem);
    return this;
  }

   /**
   * 接收者的open staffId列表
   * @return receiverIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "接收者的open staffId列表")

  public List<String> getReceiverIds() {
    return receiverIds;
  }


  public void setReceiverIds(List<String> receiverIds) {
    this.receiverIds = receiverIds;
  }


  public Event version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * 可选字段，数据的版本号，要求是个时间戳，精确到微秒， 例如：1605693953610320
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "可选字段，数据的版本号，要求是个时间戳，精确到微秒， 例如：1605693953610320")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.channelType, event.channelType) &&
        Objects.equals(this.deviceType, event.deviceType) &&
        Objects.equals(this.entryId, event.entryId) &&
        Objects.equals(this.eventData, event.eventData) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.expires, event.expires) &&
        Objects.equals(this.pushData, event.pushData) &&
        Objects.equals(this.receiverIds, event.receiverIds) &&
        Objects.equals(this.version, event.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelType, deviceType, entryId, eventData, eventType, expires, pushData, receiverIds, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    entryId: ").append(toIndentedString(entryId)).append("\n");
    sb.append("    eventData: ").append(toIndentedString(eventData)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    pushData: ").append(toIndentedString(pushData)).append("\n");
    sb.append("    receiverIds: ").append(toIndentedString(receiverIds)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


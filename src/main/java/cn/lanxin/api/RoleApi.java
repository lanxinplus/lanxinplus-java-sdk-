/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1OrgRoleCreateRequestBody;
import cn.lanxin.models.V1OrgRoleCreateResponse;
import cn.lanxin.models.V1OrgRoleMembersFetchResponse;
import cn.lanxin.models.V1RoleMemberCreateRequestBody;
import cn.lanxin.models.V1RoleMemberCreateResponse;
import cn.lanxin.models.V1RoleMemberDeleteRequestBody;
import cn.lanxin.models.V1RoleMemberDeleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleApi {
    private ApiClient localVarApiClient;

    public RoleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1OrgRoleCreate
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param v1OrgRoleCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgRoleCreateCall(String appToken, String orgid, V1OrgRoleCreateRequestBody v1OrgRoleCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1OrgRoleCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgid}/role/create"
            .replaceAll("\\{" + "orgid" + "\\}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrgRoleCreateValidateBeforeCall(String appToken, String orgid, V1OrgRoleCreateRequestBody v1OrgRoleCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1OrgRoleCreate(Async)");
        }
        
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling v1OrgRoleCreate(Async)");
        }
        
        // verify the required parameter 'v1OrgRoleCreateRequestBody' is set
        if (v1OrgRoleCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1OrgRoleCreateRequestBody' when calling v1OrgRoleCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrgRoleCreateCall(appToken, orgid, v1OrgRoleCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 创建角色
     * 创建角色
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param v1OrgRoleCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1OrgRoleCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1OrgRoleCreateResponse v1OrgRoleCreate(String appToken, String orgid, V1OrgRoleCreateRequestBody v1OrgRoleCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1OrgRoleCreateResponse> localVarResp = v1OrgRoleCreateWithHttpInfo(appToken, orgid, v1OrgRoleCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 创建角色
     * 创建角色
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param v1OrgRoleCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1OrgRoleCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1OrgRoleCreateResponse> v1OrgRoleCreateWithHttpInfo(String appToken, String orgid, V1OrgRoleCreateRequestBody v1OrgRoleCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1OrgRoleCreateValidateBeforeCall(appToken, orgid, v1OrgRoleCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1OrgRoleCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建角色 (asynchronously)
     * 创建角色
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param v1OrgRoleCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgRoleCreateAsync(String appToken, String orgid, V1OrgRoleCreateRequestBody v1OrgRoleCreateRequestBody, String userToken, final ApiCallback<V1OrgRoleCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrgRoleCreateValidateBeforeCall(appToken, orgid, v1OrgRoleCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1OrgRoleCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrgRoleMembersFetch
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param roleid roleid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgRoleMembersFetchCall(String appToken, String orgid, String roleid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgid}/role/{roleid}/members/fetch"
            .replaceAll("\\{" + "orgid" + "\\}", localVarApiClient.escapeString(orgid.toString()))
            .replaceAll("\\{" + "roleid" + "\\}", localVarApiClient.escapeString(roleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrgRoleMembersFetchValidateBeforeCall(String appToken, String orgid, String roleid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1OrgRoleMembersFetch(Async)");
        }
        
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling v1OrgRoleMembersFetch(Async)");
        }
        
        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling v1OrgRoleMembersFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrgRoleMembersFetchCall(appToken, orgid, roleid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取应用运营者列表
     * 获取对接组织里面某个角色的成员列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param roleid roleid (required)
     * @param userToken user_token (optional)
     * @return V1OrgRoleMembersFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1OrgRoleMembersFetchResponse v1OrgRoleMembersFetch(String appToken, String orgid, String roleid, String userToken) throws ApiException {
        ApiResponse<V1OrgRoleMembersFetchResponse> localVarResp = v1OrgRoleMembersFetchWithHttpInfo(appToken, orgid, roleid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取应用运营者列表
     * 获取对接组织里面某个角色的成员列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param roleid roleid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1OrgRoleMembersFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1OrgRoleMembersFetchResponse> v1OrgRoleMembersFetchWithHttpInfo(String appToken, String orgid, String roleid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1OrgRoleMembersFetchValidateBeforeCall(appToken, orgid, roleid, userToken, null);
        Type localVarReturnType = new TypeToken<V1OrgRoleMembersFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用运营者列表 (asynchronously)
     * 获取对接组织里面某个角色的成员列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param roleid roleid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgRoleMembersFetchAsync(String appToken, String orgid, String roleid, String userToken, final ApiCallback<V1OrgRoleMembersFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrgRoleMembersFetchValidateBeforeCall(appToken, orgid, roleid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1OrgRoleMembersFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1RoleMemberCreate
     * @param appToken app_token (required)
     * @param v1RoleMemberCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RoleMemberCreateCall(String appToken, V1RoleMemberCreateRequestBody v1RoleMemberCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1RoleMemberCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/rolemember/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RoleMemberCreateValidateBeforeCall(String appToken, V1RoleMemberCreateRequestBody v1RoleMemberCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1RoleMemberCreate(Async)");
        }
        
        // verify the required parameter 'v1RoleMemberCreateRequestBody' is set
        if (v1RoleMemberCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1RoleMemberCreateRequestBody' when calling v1RoleMemberCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1RoleMemberCreateCall(appToken, v1RoleMemberCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 添加角色成员
     * 添加角色成员
     * @param appToken app_token (required)
     * @param v1RoleMemberCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1RoleMemberCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1RoleMemberCreateResponse v1RoleMemberCreate(String appToken, V1RoleMemberCreateRequestBody v1RoleMemberCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1RoleMemberCreateResponse> localVarResp = v1RoleMemberCreateWithHttpInfo(appToken, v1RoleMemberCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 添加角色成员
     * 添加角色成员
     * @param appToken app_token (required)
     * @param v1RoleMemberCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1RoleMemberCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1RoleMemberCreateResponse> v1RoleMemberCreateWithHttpInfo(String appToken, V1RoleMemberCreateRequestBody v1RoleMemberCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1RoleMemberCreateValidateBeforeCall(appToken, v1RoleMemberCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1RoleMemberCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 添加角色成员 (asynchronously)
     * 添加角色成员
     * @param appToken app_token (required)
     * @param v1RoleMemberCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RoleMemberCreateAsync(String appToken, V1RoleMemberCreateRequestBody v1RoleMemberCreateRequestBody, String userToken, final ApiCallback<V1RoleMemberCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RoleMemberCreateValidateBeforeCall(appToken, v1RoleMemberCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1RoleMemberCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1RoleMemberDelete
     * @param appToken app_token (required)
     * @param rolememberid rolememberid (required)
     * @param v1RoleMemberDeleteRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RoleMemberDeleteCall(String appToken, String rolememberid, V1RoleMemberDeleteRequestBody v1RoleMemberDeleteRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1RoleMemberDeleteRequestBody;

        // create path and map variables
        String localVarPath = "/v1/rolemember/{rolememberid}/delete"
            .replaceAll("\\{" + "rolememberid" + "\\}", localVarApiClient.escapeString(rolememberid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RoleMemberDeleteValidateBeforeCall(String appToken, String rolememberid, V1RoleMemberDeleteRequestBody v1RoleMemberDeleteRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1RoleMemberDelete(Async)");
        }
        
        // verify the required parameter 'rolememberid' is set
        if (rolememberid == null) {
            throw new ApiException("Missing the required parameter 'rolememberid' when calling v1RoleMemberDelete(Async)");
        }
        
        // verify the required parameter 'v1RoleMemberDeleteRequestBody' is set
        if (v1RoleMemberDeleteRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1RoleMemberDeleteRequestBody' when calling v1RoleMemberDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1RoleMemberDeleteCall(appToken, rolememberid, v1RoleMemberDeleteRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 删除角色成员
     * 删除角色成员
     * @param appToken app_token (required)
     * @param rolememberid rolememberid (required)
     * @param v1RoleMemberDeleteRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1RoleMemberDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1RoleMemberDeleteResponse v1RoleMemberDelete(String appToken, String rolememberid, V1RoleMemberDeleteRequestBody v1RoleMemberDeleteRequestBody, String userToken) throws ApiException {
        ApiResponse<V1RoleMemberDeleteResponse> localVarResp = v1RoleMemberDeleteWithHttpInfo(appToken, rolememberid, v1RoleMemberDeleteRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 删除角色成员
     * 删除角色成员
     * @param appToken app_token (required)
     * @param rolememberid rolememberid (required)
     * @param v1RoleMemberDeleteRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1RoleMemberDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1RoleMemberDeleteResponse> v1RoleMemberDeleteWithHttpInfo(String appToken, String rolememberid, V1RoleMemberDeleteRequestBody v1RoleMemberDeleteRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1RoleMemberDeleteValidateBeforeCall(appToken, rolememberid, v1RoleMemberDeleteRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1RoleMemberDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除角色成员 (asynchronously)
     * 删除角色成员
     * @param appToken app_token (required)
     * @param rolememberid rolememberid (required)
     * @param v1RoleMemberDeleteRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RoleMemberDeleteAsync(String appToken, String rolememberid, V1RoleMemberDeleteRequestBody v1RoleMemberDeleteRequestBody, String userToken, final ApiCallback<V1RoleMemberDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RoleMemberDeleteValidateBeforeCall(appToken, rolememberid, v1RoleMemberDeleteRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1RoleMemberDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

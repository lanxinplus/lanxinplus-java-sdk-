/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1TagGroupsCreateRequestBody;
import cn.lanxin.models.V1TagGroupsCreateResponse;
import cn.lanxin.models.V1TagGroupsDeleteResponse;
import cn.lanxin.models.V1TagGroupsFetchRequestBody;
import cn.lanxin.models.V1TagGroupsFetchResponse;
import cn.lanxin.models.V1TagGroupsInfoFetchResponse;
import cn.lanxin.models.V1TagGroupsUpdateRequestBody;
import cn.lanxin.models.V1TagGroupsUpdateResponse;
import cn.lanxin.models.V1TagsCreateRequestBody;
import cn.lanxin.models.V1TagsCreateResponse;
import cn.lanxin.models.V1TagsDeleteResponse;
import cn.lanxin.models.V1TagsMetaFetchRequestBody;
import cn.lanxin.models.V1TagsMetaFetchResponse;
import cn.lanxin.models.V1TagsUpdateRequestBody;
import cn.lanxin.models.V1TagsUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddrbkTagsApi {
    private ApiClient localVarApiClient;

    public AddrbkTagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddrbkTagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1TagGroupsCreate
     * @param appToken app_token (required)
     * @param v1TagGroupsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsCreateCall(String appToken, V1TagGroupsCreateRequestBody v1TagGroupsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagGroupsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/taggroups/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagGroupsCreateValidateBeforeCall(String appToken, V1TagGroupsCreateRequestBody v1TagGroupsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagGroupsCreate(Async)");
        }
        
        // verify the required parameter 'v1TagGroupsCreateRequestBody' is set
        if (v1TagGroupsCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagGroupsCreateRequestBody' when calling v1TagGroupsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagGroupsCreateCall(appToken, v1TagGroupsCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 创建标签分组
     * 创建标签分组
     * @param appToken app_token (required)
     * @param v1TagGroupsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagGroupsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagGroupsCreateResponse v1TagGroupsCreate(String appToken, V1TagGroupsCreateRequestBody v1TagGroupsCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagGroupsCreateResponse> localVarResp = v1TagGroupsCreateWithHttpInfo(appToken, v1TagGroupsCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 创建标签分组
     * 创建标签分组
     * @param appToken app_token (required)
     * @param v1TagGroupsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagGroupsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagGroupsCreateResponse> v1TagGroupsCreateWithHttpInfo(String appToken, V1TagGroupsCreateRequestBody v1TagGroupsCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagGroupsCreateValidateBeforeCall(appToken, v1TagGroupsCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagGroupsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建标签分组 (asynchronously)
     * 创建标签分组
     * @param appToken app_token (required)
     * @param v1TagGroupsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsCreateAsync(String appToken, V1TagGroupsCreateRequestBody v1TagGroupsCreateRequestBody, String userToken, final ApiCallback<V1TagGroupsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagGroupsCreateValidateBeforeCall(appToken, v1TagGroupsCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagGroupsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagGroupsDelete
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsDeleteCall(String appToken, String tagGroupId, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taggroups/{tag_group_id}/delete"
            .replaceAll("\\{" + "tag_group_id" + "\\}", localVarApiClient.escapeString(tagGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagGroupsDeleteValidateBeforeCall(String appToken, String tagGroupId, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagGroupsDelete(Async)");
        }
        
        // verify the required parameter 'tagGroupId' is set
        if (tagGroupId == null) {
            throw new ApiException("Missing the required parameter 'tagGroupId' when calling v1TagGroupsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagGroupsDeleteCall(appToken, tagGroupId, userToken, _callback);
        return localVarCall;

    }

    /**
     * 删除标签分组
     * 删除标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @return V1TagGroupsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagGroupsDeleteResponse v1TagGroupsDelete(String appToken, String tagGroupId, String userToken) throws ApiException {
        ApiResponse<V1TagGroupsDeleteResponse> localVarResp = v1TagGroupsDeleteWithHttpInfo(appToken, tagGroupId, userToken);
        return localVarResp.getData();
    }

    /**
     * 删除标签分组
     * 删除标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagGroupsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagGroupsDeleteResponse> v1TagGroupsDeleteWithHttpInfo(String appToken, String tagGroupId, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagGroupsDeleteValidateBeforeCall(appToken, tagGroupId, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagGroupsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除标签分组 (asynchronously)
     * 删除标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsDeleteAsync(String appToken, String tagGroupId, String userToken, final ApiCallback<V1TagGroupsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagGroupsDeleteValidateBeforeCall(appToken, tagGroupId, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagGroupsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagGroupsFetch
     * @param appToken app_token (required)
     * @param v1TagGroupsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsFetchCall(String appToken, V1TagGroupsFetchRequestBody v1TagGroupsFetchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagGroupsFetchRequestBody;

        // create path and map variables
        String localVarPath = "/v1/taggroups/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagGroupsFetchValidateBeforeCall(String appToken, V1TagGroupsFetchRequestBody v1TagGroupsFetchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagGroupsFetch(Async)");
        }
        
        // verify the required parameter 'v1TagGroupsFetchRequestBody' is set
        if (v1TagGroupsFetchRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagGroupsFetchRequestBody' when calling v1TagGroupsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagGroupsFetchCall(appToken, v1TagGroupsFetchRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取标签分组列表
     * 获取标签分组列表
     * @param appToken app_token (required)
     * @param v1TagGroupsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagGroupsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagGroupsFetchResponse v1TagGroupsFetch(String appToken, V1TagGroupsFetchRequestBody v1TagGroupsFetchRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagGroupsFetchResponse> localVarResp = v1TagGroupsFetchWithHttpInfo(appToken, v1TagGroupsFetchRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取标签分组列表
     * 获取标签分组列表
     * @param appToken app_token (required)
     * @param v1TagGroupsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagGroupsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagGroupsFetchResponse> v1TagGroupsFetchWithHttpInfo(String appToken, V1TagGroupsFetchRequestBody v1TagGroupsFetchRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagGroupsFetchValidateBeforeCall(appToken, v1TagGroupsFetchRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagGroupsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取标签分组列表 (asynchronously)
     * 获取标签分组列表
     * @param appToken app_token (required)
     * @param v1TagGroupsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsFetchAsync(String appToken, V1TagGroupsFetchRequestBody v1TagGroupsFetchRequestBody, String userToken, final ApiCallback<V1TagGroupsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagGroupsFetchValidateBeforeCall(appToken, v1TagGroupsFetchRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagGroupsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagGroupsInfoFetch
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsInfoFetchCall(String appToken, String tagGroupId, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/taggroups/{tag_group_id}/fetch"
            .replaceAll("\\{" + "tag_group_id" + "\\}", localVarApiClient.escapeString(tagGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagGroupsInfoFetchValidateBeforeCall(String appToken, String tagGroupId, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagGroupsInfoFetch(Async)");
        }
        
        // verify the required parameter 'tagGroupId' is set
        if (tagGroupId == null) {
            throw new ApiException("Missing the required parameter 'tagGroupId' when calling v1TagGroupsInfoFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagGroupsInfoFetchCall(appToken, tagGroupId, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取标签分组详情
     * 获取标签分组详情
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @return V1TagGroupsInfoFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagGroupsInfoFetchResponse v1TagGroupsInfoFetch(String appToken, String tagGroupId, String userToken) throws ApiException {
        ApiResponse<V1TagGroupsInfoFetchResponse> localVarResp = v1TagGroupsInfoFetchWithHttpInfo(appToken, tagGroupId, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取标签分组详情
     * 获取标签分组详情
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagGroupsInfoFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagGroupsInfoFetchResponse> v1TagGroupsInfoFetchWithHttpInfo(String appToken, String tagGroupId, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagGroupsInfoFetchValidateBeforeCall(appToken, tagGroupId, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagGroupsInfoFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取标签分组详情 (asynchronously)
     * 获取标签分组详情
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsInfoFetchAsync(String appToken, String tagGroupId, String userToken, final ApiCallback<V1TagGroupsInfoFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagGroupsInfoFetchValidateBeforeCall(appToken, tagGroupId, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagGroupsInfoFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagGroupsUpdate
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param v1TagGroupsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsUpdateCall(String appToken, String tagGroupId, V1TagGroupsUpdateRequestBody v1TagGroupsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagGroupsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/taggroups/{tag_group_id}/update"
            .replaceAll("\\{" + "tag_group_id" + "\\}", localVarApiClient.escapeString(tagGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagGroupsUpdateValidateBeforeCall(String appToken, String tagGroupId, V1TagGroupsUpdateRequestBody v1TagGroupsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'tagGroupId' is set
        if (tagGroupId == null) {
            throw new ApiException("Missing the required parameter 'tagGroupId' when calling v1TagGroupsUpdate(Async)");
        }
        
        // verify the required parameter 'v1TagGroupsUpdateRequestBody' is set
        if (v1TagGroupsUpdateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagGroupsUpdateRequestBody' when calling v1TagGroupsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagGroupsUpdateCall(appToken, tagGroupId, v1TagGroupsUpdateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 修改标签分组
     * 修改标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param v1TagGroupsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagGroupsUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagGroupsUpdateResponse v1TagGroupsUpdate(String appToken, String tagGroupId, V1TagGroupsUpdateRequestBody v1TagGroupsUpdateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagGroupsUpdateResponse> localVarResp = v1TagGroupsUpdateWithHttpInfo(appToken, tagGroupId, v1TagGroupsUpdateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 修改标签分组
     * 修改标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param v1TagGroupsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagGroupsUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagGroupsUpdateResponse> v1TagGroupsUpdateWithHttpInfo(String appToken, String tagGroupId, V1TagGroupsUpdateRequestBody v1TagGroupsUpdateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagGroupsUpdateValidateBeforeCall(appToken, tagGroupId, v1TagGroupsUpdateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagGroupsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 修改标签分组 (asynchronously)
     * 修改标签分组
     * @param appToken app_token (required)
     * @param tagGroupId tag_group_id (required)
     * @param v1TagGroupsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagGroupsUpdateAsync(String appToken, String tagGroupId, V1TagGroupsUpdateRequestBody v1TagGroupsUpdateRequestBody, String userToken, final ApiCallback<V1TagGroupsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagGroupsUpdateValidateBeforeCall(appToken, tagGroupId, v1TagGroupsUpdateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagGroupsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagsCreate
     * @param appToken app_token (required)
     * @param v1TagsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsCreateCall(String appToken, V1TagsCreateRequestBody v1TagsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/tags/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagsCreateValidateBeforeCall(String appToken, V1TagsCreateRequestBody v1TagsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagsCreate(Async)");
        }
        
        // verify the required parameter 'v1TagsCreateRequestBody' is set
        if (v1TagsCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagsCreateRequestBody' when calling v1TagsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagsCreateCall(appToken, v1TagsCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 创建标签
     * 创建标签
     * @param appToken app_token (required)
     * @param v1TagsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagsCreateResponse v1TagsCreate(String appToken, V1TagsCreateRequestBody v1TagsCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagsCreateResponse> localVarResp = v1TagsCreateWithHttpInfo(appToken, v1TagsCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 创建标签
     * 创建标签
     * @param appToken app_token (required)
     * @param v1TagsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagsCreateResponse> v1TagsCreateWithHttpInfo(String appToken, V1TagsCreateRequestBody v1TagsCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagsCreateValidateBeforeCall(appToken, v1TagsCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建标签 (asynchronously)
     * 创建标签
     * @param appToken app_token (required)
     * @param v1TagsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsCreateAsync(String appToken, V1TagsCreateRequestBody v1TagsCreateRequestBody, String userToken, final ApiCallback<V1TagsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagsCreateValidateBeforeCall(appToken, v1TagsCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagsDelete
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsDeleteCall(String appToken, String tagid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tags/{tagid}/delete"
            .replaceAll("\\{" + "tagid" + "\\}", localVarApiClient.escapeString(tagid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagsDeleteValidateBeforeCall(String appToken, String tagid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagsDelete(Async)");
        }
        
        // verify the required parameter 'tagid' is set
        if (tagid == null) {
            throw new ApiException("Missing the required parameter 'tagid' when calling v1TagsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagsDeleteCall(appToken, tagid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 删除标签
     * 删除标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param userToken user_token (optional)
     * @return V1TagsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagsDeleteResponse v1TagsDelete(String appToken, String tagid, String userToken) throws ApiException {
        ApiResponse<V1TagsDeleteResponse> localVarResp = v1TagsDeleteWithHttpInfo(appToken, tagid, userToken);
        return localVarResp.getData();
    }

    /**
     * 删除标签
     * 删除标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagsDeleteResponse> v1TagsDeleteWithHttpInfo(String appToken, String tagid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagsDeleteValidateBeforeCall(appToken, tagid, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除标签 (asynchronously)
     * 删除标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsDeleteAsync(String appToken, String tagid, String userToken, final ApiCallback<V1TagsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagsDeleteValidateBeforeCall(appToken, tagid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagsMetaFetch
     * @param appToken app_token (required)
     * @param v1TagsMetaFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsMetaFetchCall(String appToken, V1TagsMetaFetchRequestBody v1TagsMetaFetchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagsMetaFetchRequestBody;

        // create path and map variables
        String localVarPath = "/v1/tags/meta/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagsMetaFetchValidateBeforeCall(String appToken, V1TagsMetaFetchRequestBody v1TagsMetaFetchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagsMetaFetch(Async)");
        }
        
        // verify the required parameter 'v1TagsMetaFetchRequestBody' is set
        if (v1TagsMetaFetchRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagsMetaFetchRequestBody' when calling v1TagsMetaFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagsMetaFetchCall(appToken, v1TagsMetaFetchRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取标签详情
     * 获取标签详情
     * @param appToken app_token (required)
     * @param v1TagsMetaFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagsMetaFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagsMetaFetchResponse v1TagsMetaFetch(String appToken, V1TagsMetaFetchRequestBody v1TagsMetaFetchRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagsMetaFetchResponse> localVarResp = v1TagsMetaFetchWithHttpInfo(appToken, v1TagsMetaFetchRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取标签详情
     * 获取标签详情
     * @param appToken app_token (required)
     * @param v1TagsMetaFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagsMetaFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagsMetaFetchResponse> v1TagsMetaFetchWithHttpInfo(String appToken, V1TagsMetaFetchRequestBody v1TagsMetaFetchRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagsMetaFetchValidateBeforeCall(appToken, v1TagsMetaFetchRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagsMetaFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取标签详情 (asynchronously)
     * 获取标签详情
     * @param appToken app_token (required)
     * @param v1TagsMetaFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsMetaFetchAsync(String appToken, V1TagsMetaFetchRequestBody v1TagsMetaFetchRequestBody, String userToken, final ApiCallback<V1TagsMetaFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagsMetaFetchValidateBeforeCall(appToken, v1TagsMetaFetchRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagsMetaFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagsUpdate
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param v1TagsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsUpdateCall(String appToken, String tagid, V1TagsUpdateRequestBody v1TagsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/tags/{tagid}/update"
            .replaceAll("\\{" + "tagid" + "\\}", localVarApiClient.escapeString(tagid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagsUpdateValidateBeforeCall(String appToken, String tagid, V1TagsUpdateRequestBody v1TagsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagsUpdate(Async)");
        }
        
        // verify the required parameter 'tagid' is set
        if (tagid == null) {
            throw new ApiException("Missing the required parameter 'tagid' when calling v1TagsUpdate(Async)");
        }
        
        // verify the required parameter 'v1TagsUpdateRequestBody' is set
        if (v1TagsUpdateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagsUpdateRequestBody' when calling v1TagsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagsUpdateCall(appToken, tagid, v1TagsUpdateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 修改标签
     * 修改标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param v1TagsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1TagsUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagsUpdateResponse v1TagsUpdate(String appToken, String tagid, V1TagsUpdateRequestBody v1TagsUpdateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1TagsUpdateResponse> localVarResp = v1TagsUpdateWithHttpInfo(appToken, tagid, v1TagsUpdateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 修改标签
     * 修改标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param v1TagsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1TagsUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagsUpdateResponse> v1TagsUpdateWithHttpInfo(String appToken, String tagid, V1TagsUpdateRequestBody v1TagsUpdateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1TagsUpdateValidateBeforeCall(appToken, tagid, v1TagsUpdateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1TagsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 修改标签 (asynchronously)
     * 修改标签
     * @param appToken app_token (required)
     * @param tagid tagid (required)
     * @param v1TagsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsUpdateAsync(String appToken, String tagid, V1TagsUpdateRequestBody v1TagsUpdateRequestBody, String userToken, final ApiCallback<V1TagsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagsUpdateValidateBeforeCall(appToken, tagid, v1TagsUpdateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1TagsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

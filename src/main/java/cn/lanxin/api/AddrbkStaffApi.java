/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1OrgExtraFieldIdsFetchResponse;
import cn.lanxin.models.V1StaffsCreateRequestBody;
import cn.lanxin.models.V1StaffsCreateResponse;
import cn.lanxin.models.V1StaffsDeleteResponse;
import cn.lanxin.models.V1StaffsDeptAncestorsFetchResponse;
import cn.lanxin.models.V1StaffsFetchResponse;
import cn.lanxin.models.V1StaffsInforFetchResponse;
import cn.lanxin.models.V1StaffsUpdateRequestBody;
import cn.lanxin.models.V1StaffsUpdateResponse;
import cn.lanxin.models.V1TagsFetchRequestBody;
import cn.lanxin.models.V1TagsFetchResponse;
import cn.lanxin.models.V2StaffsIdMappingFetchResponse;
import cn.lanxin.models.V2StaffsSearchRequestBody;
import cn.lanxin.models.V2StaffsSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddrbkStaffApi {
    private ApiClient localVarApiClient;

    public AddrbkStaffApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddrbkStaffApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1OrgExtraFieldIdsFetch
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始,默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgExtraFieldIdsFetchCall(String appToken, String orgid, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgid}/extrafieldids/fetch"
            .replaceAll("\\{" + "orgid" + "\\}", localVarApiClient.escapeString(orgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrgExtraFieldIdsFetchValidateBeforeCall(String appToken, String orgid, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1OrgExtraFieldIdsFetch(Async)");
        }
        
        // verify the required parameter 'orgid' is set
        if (orgid == null) {
            throw new ApiException("Missing the required parameter 'orgid' when calling v1OrgExtraFieldIdsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1OrgExtraFieldIdsFetchCall(appToken, orgid, userToken, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 获取人员信息扩展字段id列表
     * 获取组织内人员信息的扩展字段ID列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始,默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @return V1OrgExtraFieldIdsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1OrgExtraFieldIdsFetchResponse v1OrgExtraFieldIdsFetch(String appToken, String orgid, String userToken, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<V1OrgExtraFieldIdsFetchResponse> localVarResp = v1OrgExtraFieldIdsFetchWithHttpInfo(appToken, orgid, userToken, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * 获取人员信息扩展字段id列表
     * 获取组织内人员信息的扩展字段ID列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始,默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @return ApiResponse&lt;V1OrgExtraFieldIdsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1OrgExtraFieldIdsFetchResponse> v1OrgExtraFieldIdsFetchWithHttpInfo(String appToken, String orgid, String userToken, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1OrgExtraFieldIdsFetchValidateBeforeCall(appToken, orgid, userToken, page, pageSize, null);
        Type localVarReturnType = new TypeToken<V1OrgExtraFieldIdsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取人员信息扩展字段id列表 (asynchronously)
     * 获取组织内人员信息的扩展字段ID列表
     * @param appToken app_token (required)
     * @param orgid orgid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始,默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrgExtraFieldIdsFetchAsync(String appToken, String orgid, String userToken, Integer page, Integer pageSize, final ApiCallback<V1OrgExtraFieldIdsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrgExtraFieldIdsFetchValidateBeforeCall(appToken, orgid, userToken, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<V1OrgExtraFieldIdsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsCreate
     * @param appToken app_token (required)
     * @param v1StaffsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsCreateCall(String appToken, V1StaffsCreateRequestBody v1StaffsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1StaffsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/staffs/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsCreateValidateBeforeCall(String appToken, V1StaffsCreateRequestBody v1StaffsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsCreate(Async)");
        }
        
        // verify the required parameter 'v1StaffsCreateRequestBody' is set
        if (v1StaffsCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1StaffsCreateRequestBody' when calling v1StaffsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsCreateCall(appToken, v1StaffsCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 创建人员
     * 通过此接口，可以创建人员。仅组织内应用经过授权可以调用该接口。 特别说明：目前蓝信不支持应用并发调用人员创建接口，否则会出现添加人员到部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param v1StaffsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1StaffsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsCreateResponse v1StaffsCreate(String appToken, V1StaffsCreateRequestBody v1StaffsCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1StaffsCreateResponse> localVarResp = v1StaffsCreateWithHttpInfo(appToken, v1StaffsCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 创建人员
     * 通过此接口，可以创建人员。仅组织内应用经过授权可以调用该接口。 特别说明：目前蓝信不支持应用并发调用人员创建接口，否则会出现添加人员到部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param v1StaffsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsCreateResponse> v1StaffsCreateWithHttpInfo(String appToken, V1StaffsCreateRequestBody v1StaffsCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsCreateValidateBeforeCall(appToken, v1StaffsCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建人员 (asynchronously)
     * 通过此接口，可以创建人员。仅组织内应用经过授权可以调用该接口。 特别说明：目前蓝信不支持应用并发调用人员创建接口，否则会出现添加人员到部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param v1StaffsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsCreateAsync(String appToken, V1StaffsCreateRequestBody v1StaffsCreateRequestBody, String userToken, final ApiCallback<V1StaffsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsCreateValidateBeforeCall(appToken, v1StaffsCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsDelete
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsDeleteCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/staffs/{staffid}/delete"
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsDeleteValidateBeforeCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsDelete(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1StaffsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsDeleteCall(appToken, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 人员删除接口
     * 通过此接口，删除人员
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param userToken user_token (optional)
     * @return V1StaffsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsDeleteResponse v1StaffsDelete(String appToken, String staffid, String userToken) throws ApiException {
        ApiResponse<V1StaffsDeleteResponse> localVarResp = v1StaffsDeleteWithHttpInfo(appToken, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 人员删除接口
     * 通过此接口，删除人员
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsDeleteResponse> v1StaffsDeleteWithHttpInfo(String appToken, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsDeleteValidateBeforeCall(appToken, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 人员删除接口 (asynchronously)
     * 通过此接口，删除人员
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsDeleteAsync(String appToken, String staffid, String userToken, final ApiCallback<V1StaffsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsDeleteValidateBeforeCall(appToken, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsDeptAncestorsFetch
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsDeptAncestorsFetchCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/staffs/{staffid}/departmentancestors/fetch"
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsDeptAncestorsFetchValidateBeforeCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsDeptAncestorsFetch(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1StaffsDeptAncestorsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsDeptAncestorsFetchCall(appToken, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取人员分支祖先列表
     * 获取某个人员所在的所有分支的祖先列表
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return V1StaffsDeptAncestorsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsDeptAncestorsFetchResponse v1StaffsDeptAncestorsFetch(String appToken, String staffid, String userToken) throws ApiException {
        ApiResponse<V1StaffsDeptAncestorsFetchResponse> localVarResp = v1StaffsDeptAncestorsFetchWithHttpInfo(appToken, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取人员分支祖先列表
     * 获取某个人员所在的所有分支的祖先列表
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsDeptAncestorsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsDeptAncestorsFetchResponse> v1StaffsDeptAncestorsFetchWithHttpInfo(String appToken, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsDeptAncestorsFetchValidateBeforeCall(appToken, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsDeptAncestorsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取人员分支祖先列表 (asynchronously)
     * 获取某个人员所在的所有分支的祖先列表
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsDeptAncestorsFetchAsync(String appToken, String staffid, String userToken, final ApiCallback<V1StaffsDeptAncestorsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsDeptAncestorsFetchValidateBeforeCall(appToken, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsDeptAncestorsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsFetch
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsFetchCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/staffs/{staffid}/fetch"
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsFetchValidateBeforeCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsFetch(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1StaffsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsFetchCall(appToken, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取人员基本信息
     * 可以获人员的基本信息
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return V1StaffsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsFetchResponse v1StaffsFetch(String appToken, String staffid, String userToken) throws ApiException {
        ApiResponse<V1StaffsFetchResponse> localVarResp = v1StaffsFetchWithHttpInfo(appToken, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取人员基本信息
     * 可以获人员的基本信息
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsFetchResponse> v1StaffsFetchWithHttpInfo(String appToken, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsFetchValidateBeforeCall(appToken, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取人员基本信息 (asynchronously)
     * 可以获人员的基本信息
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsFetchAsync(String appToken, String staffid, String userToken, final ApiCallback<V1StaffsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsFetchValidateBeforeCall(appToken, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsInforFetch
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsInforFetchCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/staffs/{staffid}/infor/fetch"
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsInforFetchValidateBeforeCall(String appToken, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsInforFetch(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1StaffsInforFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsInforFetchCall(appToken, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取人员详细信息
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return V1StaffsInforFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsInforFetchResponse v1StaffsInforFetch(String appToken, String staffid, String userToken) throws ApiException {
        ApiResponse<V1StaffsInforFetchResponse> localVarResp = v1StaffsInforFetchWithHttpInfo(appToken, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取人员详细信息
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsInforFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsInforFetchResponse> v1StaffsInforFetchWithHttpInfo(String appToken, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsInforFetchValidateBeforeCall(appToken, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsInforFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取人员详细信息 (asynchronously)
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsInforFetchAsync(String appToken, String staffid, String userToken, final ApiCallback<V1StaffsInforFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsInforFetchValidateBeforeCall(appToken, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsInforFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StaffsUpdate
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param v1StaffsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsUpdateCall(String appToken, String staffid, V1StaffsUpdateRequestBody v1StaffsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1StaffsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/staffs/{staffid}/update"
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StaffsUpdateValidateBeforeCall(String appToken, String staffid, V1StaffsUpdateRequestBody v1StaffsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1StaffsUpdate(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1StaffsUpdate(Async)");
        }
        
        // verify the required parameter 'v1StaffsUpdateRequestBody' is set
        if (v1StaffsUpdateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1StaffsUpdateRequestBody' when calling v1StaffsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1StaffsUpdateCall(appToken, staffid, v1StaffsUpdateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 更新人员
     * 通过此接口，可以更新人员信息。仅组织内应用经过授权可以调用该接口。 特别说明：如果涉及人员的部门信息更新，目前蓝信不支持应用并发调用人员更新接口，否则会出现更新人员部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param v1StaffsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1StaffsUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1StaffsUpdateResponse v1StaffsUpdate(String appToken, String staffid, V1StaffsUpdateRequestBody v1StaffsUpdateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1StaffsUpdateResponse> localVarResp = v1StaffsUpdateWithHttpInfo(appToken, staffid, v1StaffsUpdateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 更新人员
     * 通过此接口，可以更新人员信息。仅组织内应用经过授权可以调用该接口。 特别说明：如果涉及人员的部门信息更新，目前蓝信不支持应用并发调用人员更新接口，否则会出现更新人员部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param v1StaffsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1StaffsUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1StaffsUpdateResponse> v1StaffsUpdateWithHttpInfo(String appToken, String staffid, V1StaffsUpdateRequestBody v1StaffsUpdateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1StaffsUpdateValidateBeforeCall(appToken, staffid, v1StaffsUpdateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1StaffsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新人员 (asynchronously)
     * 通过此接口，可以更新人员信息。仅组织内应用经过授权可以调用该接口。 特别说明：如果涉及人员的部门信息更新，目前蓝信不支持应用并发调用人员更新接口，否则会出现更新人员部门的操作失败，应用需要保证串行化调用该接口
     * @param appToken app_token (required)
     * @param staffid 人员 id (required)
     * @param v1StaffsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1StaffsUpdateAsync(String appToken, String staffid, V1StaffsUpdateRequestBody v1StaffsUpdateRequestBody, String userToken, final ApiCallback<V1StaffsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StaffsUpdateValidateBeforeCall(appToken, staffid, v1StaffsUpdateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1StaffsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1TagsFetch
     * @param appToken app_token (required)
     * @param v1TagsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsFetchCall(String appToken, V1TagsFetchRequestBody v1TagsFetchRequestBody, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1TagsFetchRequestBody;

        // create path and map variables
        String localVarPath = "/v1/tags/staffids/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1TagsFetchValidateBeforeCall(String appToken, V1TagsFetchRequestBody v1TagsFetchRequestBody, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1TagsFetch(Async)");
        }
        
        // verify the required parameter 'v1TagsFetchRequestBody' is set
        if (v1TagsFetchRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1TagsFetchRequestBody' when calling v1TagsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1TagsFetchCall(appToken, v1TagsFetchRequestBody, userToken, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 通过标签获取人员的id列表
     * 在组织内，通过指定标签过滤规则来筛选目标人员。 EMC管理后台和开放平台接口都提供关于标签的创建、修改、删除、给人员添加标签等功能，开发人员可以调用开放平台接口获取到已创建的所有标签分组， 然后根据指定的分组ID再获取到该分组下的所有标签
     * @param appToken app_token (required)
     * @param v1TagsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @return V1TagsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1TagsFetchResponse v1TagsFetch(String appToken, V1TagsFetchRequestBody v1TagsFetchRequestBody, String userToken, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<V1TagsFetchResponse> localVarResp = v1TagsFetchWithHttpInfo(appToken, v1TagsFetchRequestBody, userToken, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * 通过标签获取人员的id列表
     * 在组织内，通过指定标签过滤规则来筛选目标人员。 EMC管理后台和开放平台接口都提供关于标签的创建、修改、删除、给人员添加标签等功能，开发人员可以调用开放平台接口获取到已创建的所有标签分组， 然后根据指定的分组ID再获取到该分组下的所有标签
     * @param appToken app_token (required)
     * @param v1TagsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @return ApiResponse&lt;V1TagsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TagsFetchResponse> v1TagsFetchWithHttpInfo(String appToken, V1TagsFetchRequestBody v1TagsFetchRequestBody, String userToken, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1TagsFetchValidateBeforeCall(appToken, v1TagsFetchRequestBody, userToken, page, pageSize, null);
        Type localVarReturnType = new TypeToken<V1TagsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过标签获取人员的id列表 (asynchronously)
     * 在组织内，通过指定标签过滤规则来筛选目标人员。 EMC管理后台和开放平台接口都提供关于标签的创建、修改、删除、给人员添加标签等功能，开发人员可以调用开放平台接口获取到已创建的所有标签分组， 然后根据指定的分组ID再获取到该分组下的所有标签
     * @param appToken app_token (required)
     * @param v1TagsFetchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是1000，最大值是100000 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1TagsFetchAsync(String appToken, V1TagsFetchRequestBody v1TagsFetchRequestBody, String userToken, Integer page, Integer pageSize, final ApiCallback<V1TagsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1TagsFetchValidateBeforeCall(appToken, v1TagsFetchRequestBody, userToken, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<V1TagsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2StaffsIdMappingFetch
     * @param appToken app_token (required)
     * @param orgId 查询人员所在的组织Id (required)
     * @param idType employ_id/mobile/mail/login/external_id (required)
     * @param idValue id_type 对应的值：人员编号，手机号... (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2StaffsIdMappingFetchCall(String appToken, String orgId, String idType, String idValue, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/staffs/id_mapping/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (orgId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("org_id", orgId));
        }

        if (idType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id_type", idType));
        }

        if (idValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id_value", idValue));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2StaffsIdMappingFetchValidateBeforeCall(String appToken, String orgId, String idType, String idValue, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v2StaffsIdMappingFetch(Async)");
        }
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling v2StaffsIdMappingFetch(Async)");
        }
        
        // verify the required parameter 'idType' is set
        if (idType == null) {
            throw new ApiException("Missing the required parameter 'idType' when calling v2StaffsIdMappingFetch(Async)");
        }
        
        // verify the required parameter 'idValue' is set
        if (idValue == null) {
            throw new ApiException("Missing the required parameter 'idValue' when calling v2StaffsIdMappingFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v2StaffsIdMappingFetchCall(appToken, orgId, idType, idValue, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取人员详细信息
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param orgId 查询人员所在的组织Id (required)
     * @param idType employ_id/mobile/mail/login/external_id (required)
     * @param idValue id_type 对应的值：人员编号，手机号... (required)
     * @param userToken user_token (optional)
     * @return V2StaffsIdMappingFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V2StaffsIdMappingFetchResponse v2StaffsIdMappingFetch(String appToken, String orgId, String idType, String idValue, String userToken) throws ApiException {
        ApiResponse<V2StaffsIdMappingFetchResponse> localVarResp = v2StaffsIdMappingFetchWithHttpInfo(appToken, orgId, idType, idValue, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取人员详细信息
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param orgId 查询人员所在的组织Id (required)
     * @param idType employ_id/mobile/mail/login/external_id (required)
     * @param idValue id_type 对应的值：人员编号，手机号... (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V2StaffsIdMappingFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V2StaffsIdMappingFetchResponse> v2StaffsIdMappingFetchWithHttpInfo(String appToken, String orgId, String idType, String idValue, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v2StaffsIdMappingFetchValidateBeforeCall(appToken, orgId, idType, idValue, userToken, null);
        Type localVarReturnType = new TypeToken<V2StaffsIdMappingFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取人员详细信息 (asynchronously)
     * 通过此接口，可以获取人员详细信息。需要组织授权或者个人授权
     * @param appToken app_token (required)
     * @param orgId 查询人员所在的组织Id (required)
     * @param idType employ_id/mobile/mail/login/external_id (required)
     * @param idValue id_type 对应的值：人员编号，手机号... (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2StaffsIdMappingFetchAsync(String appToken, String orgId, String idType, String idValue, String userToken, final ApiCallback<V2StaffsIdMappingFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2StaffsIdMappingFetchValidateBeforeCall(appToken, orgId, idType, idValue, userToken, _callback);
        Type localVarReturnType = new TypeToken<V2StaffsIdMappingFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2StaffsSearch
     * @param appToken app_token (required)
     * @param userId user_id (required)
     * @param v2StaffsSearchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2StaffsSearchCall(String appToken, String userId, V2StaffsSearchRequestBody v2StaffsSearchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v2StaffsSearchRequestBody;

        // create path and map variables
        String localVarPath = "/v2/staffs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2StaffsSearchValidateBeforeCall(String appToken, String userId, V2StaffsSearchRequestBody v2StaffsSearchRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v2StaffsSearch(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v2StaffsSearch(Async)");
        }
        
        // verify the required parameter 'v2StaffsSearchRequestBody' is set
        if (v2StaffsSearchRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v2StaffsSearchRequestBody' when calling v2StaffsSearch(Async)");
        }
        

        okhttp3.Call localVarCall = v2StaffsSearchCall(appToken, userId, v2StaffsSearchRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 搜索人员
     * 搜索人员
     * @param appToken app_token (required)
     * @param userId user_id (required)
     * @param v2StaffsSearchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V2StaffsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V2StaffsSearchResponse v2StaffsSearch(String appToken, String userId, V2StaffsSearchRequestBody v2StaffsSearchRequestBody, String userToken) throws ApiException {
        ApiResponse<V2StaffsSearchResponse> localVarResp = v2StaffsSearchWithHttpInfo(appToken, userId, v2StaffsSearchRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 搜索人员
     * 搜索人员
     * @param appToken app_token (required)
     * @param userId user_id (required)
     * @param v2StaffsSearchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V2StaffsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V2StaffsSearchResponse> v2StaffsSearchWithHttpInfo(String appToken, String userId, V2StaffsSearchRequestBody v2StaffsSearchRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v2StaffsSearchValidateBeforeCall(appToken, userId, v2StaffsSearchRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V2StaffsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索人员 (asynchronously)
     * 搜索人员
     * @param appToken app_token (required)
     * @param userId user_id (required)
     * @param v2StaffsSearchRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2StaffsSearchAsync(String appToken, String userId, V2StaffsSearchRequestBody v2StaffsSearchRequestBody, String userToken, final ApiCallback<V2StaffsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2StaffsSearchValidateBeforeCall(appToken, userId, v2StaffsSearchRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V2StaffsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

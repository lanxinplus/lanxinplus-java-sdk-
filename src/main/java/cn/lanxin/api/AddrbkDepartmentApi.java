/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1DeptsChildrenFetchResponse;
import cn.lanxin.models.V1DeptsCreateRequestBody;
import cn.lanxin.models.V1DeptsCreateResponse;
import cn.lanxin.models.V1DeptsDeleteResponse;
import cn.lanxin.models.V1DeptsFetchResponse;
import cn.lanxin.models.V1DeptsStaffsCreateResponse;
import cn.lanxin.models.V1DeptsStaffsDeleteResponse;
import cn.lanxin.models.V1DeptsStaffsFetchResponse;
import cn.lanxin.models.V1DeptsUpdateRequestBody;
import cn.lanxin.models.V1DeptsUpdateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddrbkDepartmentApi {
    private ApiClient localVarApiClient;

    public AddrbkDepartmentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddrbkDepartmentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1DeptsChildrenFetch
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsChildrenFetchCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/children/fetch"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsChildrenFetchValidateBeforeCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsChildrenFetch(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsChildrenFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsChildrenFetchCall(appToken, departmentid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取子分支列表
     * 获取子分支列表，只获取一层
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return V1DeptsChildrenFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsChildrenFetchResponse v1DeptsChildrenFetch(String appToken, String departmentid, String userToken) throws ApiException {
        ApiResponse<V1DeptsChildrenFetchResponse> localVarResp = v1DeptsChildrenFetchWithHttpInfo(appToken, departmentid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取子分支列表
     * 获取子分支列表，只获取一层
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsChildrenFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsChildrenFetchResponse> v1DeptsChildrenFetchWithHttpInfo(String appToken, String departmentid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsChildrenFetchValidateBeforeCall(appToken, departmentid, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsChildrenFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取子分支列表 (asynchronously)
     * 获取子分支列表，只获取一层
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsChildrenFetchAsync(String appToken, String departmentid, String userToken, final ApiCallback<V1DeptsChildrenFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsChildrenFetchValidateBeforeCall(appToken, departmentid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsChildrenFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsCreate
     * @param appToken app_token (required)
     * @param v1DeptsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsCreateCall(String appToken, V1DeptsCreateRequestBody v1DeptsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1DeptsCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/departments/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsCreateValidateBeforeCall(String appToken, V1DeptsCreateRequestBody v1DeptsCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsCreate(Async)");
        }
        
        // verify the required parameter 'v1DeptsCreateRequestBody' is set
        if (v1DeptsCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1DeptsCreateRequestBody' when calling v1DeptsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsCreateCall(appToken, v1DeptsCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 创建分支
     * 创建分支。接口需要拥有对应的授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param v1DeptsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1DeptsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsCreateResponse v1DeptsCreate(String appToken, V1DeptsCreateRequestBody v1DeptsCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1DeptsCreateResponse> localVarResp = v1DeptsCreateWithHttpInfo(appToken, v1DeptsCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 创建分支
     * 创建分支。接口需要拥有对应的授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param v1DeptsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsCreateResponse> v1DeptsCreateWithHttpInfo(String appToken, V1DeptsCreateRequestBody v1DeptsCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsCreateValidateBeforeCall(appToken, v1DeptsCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建分支 (asynchronously)
     * 创建分支。接口需要拥有对应的授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param v1DeptsCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsCreateAsync(String appToken, V1DeptsCreateRequestBody v1DeptsCreateRequestBody, String userToken, final ApiCallback<V1DeptsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsCreateValidateBeforeCall(appToken, v1DeptsCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsDelete
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsDeleteCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/delete"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsDeleteValidateBeforeCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsDelete(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsDeleteCall(appToken, departmentid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 删除分支
     * 删除分支，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return V1DeptsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsDeleteResponse v1DeptsDelete(String appToken, String departmentid, String userToken) throws ApiException {
        ApiResponse<V1DeptsDeleteResponse> localVarResp = v1DeptsDeleteWithHttpInfo(appToken, departmentid, userToken);
        return localVarResp.getData();
    }

    /**
     * 删除分支
     * 删除分支，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsDeleteResponse> v1DeptsDeleteWithHttpInfo(String appToken, String departmentid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsDeleteValidateBeforeCall(appToken, departmentid, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除分支 (asynchronously)
     * 删除分支，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsDeleteAsync(String appToken, String departmentid, String userToken, final ApiCallback<V1DeptsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsDeleteValidateBeforeCall(appToken, departmentid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsFetch
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsFetchCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/fetch"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsFetchValidateBeforeCall(String appToken, String departmentid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsFetch(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsFetchCall(appToken, departmentid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取分支详情
     * 获取分支详情信息
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return V1DeptsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsFetchResponse v1DeptsFetch(String appToken, String departmentid, String userToken) throws ApiException {
        ApiResponse<V1DeptsFetchResponse> localVarResp = v1DeptsFetchWithHttpInfo(appToken, departmentid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取分支详情
     * 获取分支详情信息
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsFetchResponse> v1DeptsFetchWithHttpInfo(String appToken, String departmentid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsFetchValidateBeforeCall(appToken, departmentid, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分支详情 (asynchronously)
     * 获取分支详情信息
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsFetchAsync(String appToken, String departmentid, String userToken, final ApiCallback<V1DeptsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsFetchValidateBeforeCall(appToken, departmentid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsStaffsCreate
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsCreateCall(String appToken, String departmentid, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/staffs/{staffid}/create"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()))
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsStaffsCreateValidateBeforeCall(String appToken, String departmentid, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsStaffsCreate(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsStaffsCreate(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1DeptsStaffsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsStaffsCreateCall(appToken, departmentid, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 添加分支成员
     * 为指定分支添加成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return V1DeptsStaffsCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsStaffsCreateResponse v1DeptsStaffsCreate(String appToken, String departmentid, String staffid, String userToken) throws ApiException {
        ApiResponse<V1DeptsStaffsCreateResponse> localVarResp = v1DeptsStaffsCreateWithHttpInfo(appToken, departmentid, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 添加分支成员
     * 为指定分支添加成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsStaffsCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsStaffsCreateResponse> v1DeptsStaffsCreateWithHttpInfo(String appToken, String departmentid, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsStaffsCreateValidateBeforeCall(appToken, departmentid, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 添加分支成员 (asynchronously)
     * 为指定分支添加成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsCreateAsync(String appToken, String departmentid, String staffid, String userToken, final ApiCallback<V1DeptsStaffsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsStaffsCreateValidateBeforeCall(appToken, departmentid, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsStaffsDelete
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsDeleteCall(String appToken, String departmentid, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/staffs/{staffid}/delete"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()))
            .replaceAll("\\{" + "staffid" + "\\}", localVarApiClient.escapeString(staffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsStaffsDeleteValidateBeforeCall(String appToken, String departmentid, String staffid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsStaffsDelete(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsStaffsDelete(Async)");
        }
        
        // verify the required parameter 'staffid' is set
        if (staffid == null) {
            throw new ApiException("Missing the required parameter 'staffid' when calling v1DeptsStaffsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsStaffsDeleteCall(appToken, departmentid, staffid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 删除分支成员
     * 删除分支成员，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return V1DeptsStaffsDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsStaffsDeleteResponse v1DeptsStaffsDelete(String appToken, String departmentid, String staffid, String userToken) throws ApiException {
        ApiResponse<V1DeptsStaffsDeleteResponse> localVarResp = v1DeptsStaffsDeleteWithHttpInfo(appToken, departmentid, staffid, userToken);
        return localVarResp.getData();
    }

    /**
     * 删除分支成员
     * 删除分支成员，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsStaffsDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsStaffsDeleteResponse> v1DeptsStaffsDeleteWithHttpInfo(String appToken, String departmentid, String staffid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsStaffsDeleteValidateBeforeCall(appToken, departmentid, staffid, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除分支成员 (asynchronously)
     * 删除分支成员，仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param staffid staffid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsDeleteAsync(String appToken, String departmentid, String staffid, String userToken, final ApiCallback<V1DeptsStaffsDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsStaffsDeleteValidateBeforeCall(appToken, departmentid, staffid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsStaffsFetch
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是100，最大值是100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsFetchCall(String appToken, String departmentid, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/staffs/fetch"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsStaffsFetchValidateBeforeCall(String appToken, String departmentid, String userToken, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsStaffsFetch(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsStaffsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsStaffsFetchCall(appToken, departmentid, userToken, page, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 获取分支成员列表
     * 根据分支ID 获取分支成员列表，目前只返回当前分支下的成员，不含子分支的成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是100，最大值是100 (optional)
     * @return V1DeptsStaffsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsStaffsFetchResponse v1DeptsStaffsFetch(String appToken, String departmentid, String userToken, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<V1DeptsStaffsFetchResponse> localVarResp = v1DeptsStaffsFetchWithHttpInfo(appToken, departmentid, userToken, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * 获取分支成员列表
     * 根据分支ID 获取分支成员列表，目前只返回当前分支下的成员，不含子分支的成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是100，最大值是100 (optional)
     * @return ApiResponse&lt;V1DeptsStaffsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsStaffsFetchResponse> v1DeptsStaffsFetchWithHttpInfo(String appToken, String departmentid, String userToken, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsStaffsFetchValidateBeforeCall(appToken, departmentid, userToken, page, pageSize, null);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分支成员列表 (asynchronously)
     * 根据分支ID 获取分支成员列表，目前只返回当前分支下的成员，不含子分支的成员
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param userToken user_token (optional)
     * @param page 起始页码从1开始，默认值为1 (optional)
     * @param pageSize 每页显示个数，默认值是100，最大值是100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsStaffsFetchAsync(String appToken, String departmentid, String userToken, Integer page, Integer pageSize, final ApiCallback<V1DeptsStaffsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsStaffsFetchValidateBeforeCall(appToken, departmentid, userToken, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsStaffsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1DeptsUpdate
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param v1DeptsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsUpdateCall(String appToken, String departmentid, V1DeptsUpdateRequestBody v1DeptsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1DeptsUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/departments/{departmentid}/update"
            .replaceAll("\\{" + "departmentid" + "\\}", localVarApiClient.escapeString(departmentid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1DeptsUpdateValidateBeforeCall(String appToken, String departmentid, V1DeptsUpdateRequestBody v1DeptsUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1DeptsUpdate(Async)");
        }
        
        // verify the required parameter 'departmentid' is set
        if (departmentid == null) {
            throw new ApiException("Missing the required parameter 'departmentid' when calling v1DeptsUpdate(Async)");
        }
        
        // verify the required parameter 'v1DeptsUpdateRequestBody' is set
        if (v1DeptsUpdateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1DeptsUpdateRequestBody' when calling v1DeptsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1DeptsUpdateCall(appToken, departmentid, v1DeptsUpdateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 更新分支
     * 更新分支信息，接口需要拥有授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param v1DeptsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1DeptsUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1DeptsUpdateResponse v1DeptsUpdate(String appToken, String departmentid, V1DeptsUpdateRequestBody v1DeptsUpdateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1DeptsUpdateResponse> localVarResp = v1DeptsUpdateWithHttpInfo(appToken, departmentid, v1DeptsUpdateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 更新分支
     * 更新分支信息，接口需要拥有授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param v1DeptsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1DeptsUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeptsUpdateResponse> v1DeptsUpdateWithHttpInfo(String appToken, String departmentid, V1DeptsUpdateRequestBody v1DeptsUpdateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1DeptsUpdateValidateBeforeCall(appToken, departmentid, v1DeptsUpdateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1DeptsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新分支 (asynchronously)
     * 更新分支信息，接口需要拥有授权。仅组织内应用经过授权可以调用该接口
     * @param appToken app_token (required)
     * @param departmentid departmentid (required)
     * @param v1DeptsUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1DeptsUpdateAsync(String appToken, String departmentid, V1DeptsUpdateRequestBody v1DeptsUpdateRequestBody, String userToken, final ApiCallback<V1DeptsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1DeptsUpdateValidateBeforeCall(appToken, departmentid, v1DeptsUpdateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1DeptsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

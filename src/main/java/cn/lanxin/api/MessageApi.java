/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1ChatNotificationFetchResponse;
import cn.lanxin.models.V1MessagesCreateRequestBody;
import cn.lanxin.models.V1MessagesCreateResponse;
import cn.lanxin.models.V1MessagesNotificationCreateRequestBody;
import cn.lanxin.models.V1MessagesNotificationCreateResponse;
import cn.lanxin.models.V1MessagesRevokeRequestBody;
import cn.lanxin.models.V1MessagesRevokeResponse;
import cn.lanxin.models.V2ChatNotificationUpdateRequestBody;
import cn.lanxin.models.V2ChatNotificationUpdateResponse;
import cn.lanxin.models.V2EventNotificationCreateRequestBody;
import cn.lanxin.models.V2EventNotificationCreateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient localVarApiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1ChatNotificationFetch
     * @param appToken app_token (required)
     * @param userid userid (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ChatNotificationFetchCall(String appToken, String userid, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/chat/notification/{userid}/fetch"
            .replaceAll("\\{" + "userid" + "\\}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ChatNotificationFetchValidateBeforeCall(String appToken, String userid, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1ChatNotificationFetch(Async)");
        }
        
        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling v1ChatNotificationFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1ChatNotificationFetchCall(appToken, userid, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取通知消息会话状态
     * 获取通知消息会话状态
     * @param appToken app_token (required)
     * @param userid userid (required)
     * @param userToken user_token (optional)
     * @return V1ChatNotificationFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1ChatNotificationFetchResponse v1ChatNotificationFetch(String appToken, String userid, String userToken) throws ApiException {
        ApiResponse<V1ChatNotificationFetchResponse> localVarResp = v1ChatNotificationFetchWithHttpInfo(appToken, userid, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取通知消息会话状态
     * 获取通知消息会话状态
     * @param appToken app_token (required)
     * @param userid userid (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1ChatNotificationFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1ChatNotificationFetchResponse> v1ChatNotificationFetchWithHttpInfo(String appToken, String userid, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1ChatNotificationFetchValidateBeforeCall(appToken, userid, userToken, null);
        Type localVarReturnType = new TypeToken<V1ChatNotificationFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取通知消息会话状态 (asynchronously)
     * 获取通知消息会话状态
     * @param appToken app_token (required)
     * @param userid userid (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1ChatNotificationFetchAsync(String appToken, String userid, String userToken, final ApiCallback<V1ChatNotificationFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ChatNotificationFetchValidateBeforeCall(appToken, userid, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1ChatNotificationFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessagesCreate
     * @param appToken app_token (required)
     * @param v1MessagesCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesCreateCall(String appToken, V1MessagesCreateRequestBody v1MessagesCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1MessagesCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/messages/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessagesCreateValidateBeforeCall(String appToken, V1MessagesCreateRequestBody v1MessagesCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1MessagesCreate(Async)");
        }
        
        // verify the required parameter 'v1MessagesCreateRequestBody' is set
        if (v1MessagesCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1MessagesCreateRequestBody' when calling v1MessagesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessagesCreateCall(appToken, v1MessagesCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 发送应用消息应用号通道
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v1MessagesCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1MessagesCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1MessagesCreateResponse v1MessagesCreate(String appToken, V1MessagesCreateRequestBody v1MessagesCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1MessagesCreateResponse> localVarResp = v1MessagesCreateWithHttpInfo(appToken, v1MessagesCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 发送应用消息应用号通道
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v1MessagesCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1MessagesCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1MessagesCreateResponse> v1MessagesCreateWithHttpInfo(String appToken, V1MessagesCreateRequestBody v1MessagesCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1MessagesCreateValidateBeforeCall(appToken, v1MessagesCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1MessagesCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送应用消息应用号通道 (asynchronously)
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v1MessagesCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesCreateAsync(String appToken, V1MessagesCreateRequestBody v1MessagesCreateRequestBody, String userToken, final ApiCallback<V1MessagesCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessagesCreateValidateBeforeCall(appToken, v1MessagesCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1MessagesCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessagesNotificationCreate
     * @param appToken app_token (required)
     * @param v1MessagesNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesNotificationCreateCall(String appToken, V1MessagesNotificationCreateRequestBody v1MessagesNotificationCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1MessagesNotificationCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v1/messages/notification/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessagesNotificationCreateValidateBeforeCall(String appToken, V1MessagesNotificationCreateRequestBody v1MessagesNotificationCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1MessagesNotificationCreate(Async)");
        }
        
        // verify the required parameter 'v1MessagesNotificationCreateRequestBody' is set
        if (v1MessagesNotificationCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1MessagesNotificationCreateRequestBody' when calling v1MessagesNotificationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessagesNotificationCreateCall(appToken, v1MessagesNotificationCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 发送通知消息
     * 通过该接口，应用可以给指定人发送通知消息。 特别说明：该消息类型仅展示会话列表摘要，不展示会话消息详情，点击会话摘要直接跳转应用首页入口。仅适用于通知，邮件等特定代办数量&amp;摘要类型的消息场景。普通办公类卡片消息不建议使用该接口
     * @param appToken app_token (required)
     * @param v1MessagesNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1MessagesNotificationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1MessagesNotificationCreateResponse v1MessagesNotificationCreate(String appToken, V1MessagesNotificationCreateRequestBody v1MessagesNotificationCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V1MessagesNotificationCreateResponse> localVarResp = v1MessagesNotificationCreateWithHttpInfo(appToken, v1MessagesNotificationCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 发送通知消息
     * 通过该接口，应用可以给指定人发送通知消息。 特别说明：该消息类型仅展示会话列表摘要，不展示会话消息详情，点击会话摘要直接跳转应用首页入口。仅适用于通知，邮件等特定代办数量&amp;摘要类型的消息场景。普通办公类卡片消息不建议使用该接口
     * @param appToken app_token (required)
     * @param v1MessagesNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1MessagesNotificationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1MessagesNotificationCreateResponse> v1MessagesNotificationCreateWithHttpInfo(String appToken, V1MessagesNotificationCreateRequestBody v1MessagesNotificationCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1MessagesNotificationCreateValidateBeforeCall(appToken, v1MessagesNotificationCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1MessagesNotificationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送通知消息 (asynchronously)
     * 通过该接口，应用可以给指定人发送通知消息。 特别说明：该消息类型仅展示会话列表摘要，不展示会话消息详情，点击会话摘要直接跳转应用首页入口。仅适用于通知，邮件等特定代办数量&amp;摘要类型的消息场景。普通办公类卡片消息不建议使用该接口
     * @param appToken app_token (required)
     * @param v1MessagesNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesNotificationCreateAsync(String appToken, V1MessagesNotificationCreateRequestBody v1MessagesNotificationCreateRequestBody, String userToken, final ApiCallback<V1MessagesNotificationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessagesNotificationCreateValidateBeforeCall(appToken, v1MessagesNotificationCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1MessagesNotificationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessagesRevoke
     * @param appToken app_token (required)
     * @param v1MessagesRevokeRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesRevokeCall(String appToken, V1MessagesRevokeRequestBody v1MessagesRevokeRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v1MessagesRevokeRequestBody;

        // create path and map variables
        String localVarPath = "/v1/messages/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessagesRevokeValidateBeforeCall(String appToken, V1MessagesRevokeRequestBody v1MessagesRevokeRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1MessagesRevoke(Async)");
        }
        
        // verify the required parameter 'v1MessagesRevokeRequestBody' is set
        if (v1MessagesRevokeRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v1MessagesRevokeRequestBody' when calling v1MessagesRevoke(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessagesRevokeCall(appToken, v1MessagesRevokeRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 撤回消息
     * 通过该接口，应用可以撤回已发送消息，消息撤回有时效性，并非所有消息都可以撤回。目前私聊和群聊只能撤回5分钟内发送的消息，应用消息（公号通道）可以撤回24小时内的消息
     * @param appToken app_token (required)
     * @param v1MessagesRevokeRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V1MessagesRevokeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1MessagesRevokeResponse v1MessagesRevoke(String appToken, V1MessagesRevokeRequestBody v1MessagesRevokeRequestBody, String userToken) throws ApiException {
        ApiResponse<V1MessagesRevokeResponse> localVarResp = v1MessagesRevokeWithHttpInfo(appToken, v1MessagesRevokeRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 撤回消息
     * 通过该接口，应用可以撤回已发送消息，消息撤回有时效性，并非所有消息都可以撤回。目前私聊和群聊只能撤回5分钟内发送的消息，应用消息（公号通道）可以撤回24小时内的消息
     * @param appToken app_token (required)
     * @param v1MessagesRevokeRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1MessagesRevokeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1MessagesRevokeResponse> v1MessagesRevokeWithHttpInfo(String appToken, V1MessagesRevokeRequestBody v1MessagesRevokeRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1MessagesRevokeValidateBeforeCall(appToken, v1MessagesRevokeRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V1MessagesRevokeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 撤回消息 (asynchronously)
     * 通过该接口，应用可以撤回已发送消息，消息撤回有时效性，并非所有消息都可以撤回。目前私聊和群聊只能撤回5分钟内发送的消息，应用消息（公号通道）可以撤回24小时内的消息
     * @param appToken app_token (required)
     * @param v1MessagesRevokeRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessagesRevokeAsync(String appToken, V1MessagesRevokeRequestBody v1MessagesRevokeRequestBody, String userToken, final ApiCallback<V1MessagesRevokeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessagesRevokeValidateBeforeCall(appToken, v1MessagesRevokeRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1MessagesRevokeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2ChatNotificationUpdate
     * @param appToken app_token (required)
     * @param v2ChatNotificationUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ChatNotificationUpdateCall(String appToken, V2ChatNotificationUpdateRequestBody v2ChatNotificationUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v2ChatNotificationUpdateRequestBody;

        // create path and map variables
        String localVarPath = "/v2/chat/notification/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2ChatNotificationUpdateValidateBeforeCall(String appToken, V2ChatNotificationUpdateRequestBody v2ChatNotificationUpdateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v2ChatNotificationUpdate(Async)");
        }
        
        // verify the required parameter 'v2ChatNotificationUpdateRequestBody' is set
        if (v2ChatNotificationUpdateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v2ChatNotificationUpdateRequestBody' when calling v2ChatNotificationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v2ChatNotificationUpdateCall(appToken, v2ChatNotificationUpdateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 更新通知消息会话状态（批量）
     * 更新通知消息会话状态（批量）
     * @param appToken app_token (required)
     * @param v2ChatNotificationUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V2ChatNotificationUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V2ChatNotificationUpdateResponse v2ChatNotificationUpdate(String appToken, V2ChatNotificationUpdateRequestBody v2ChatNotificationUpdateRequestBody, String userToken) throws ApiException {
        ApiResponse<V2ChatNotificationUpdateResponse> localVarResp = v2ChatNotificationUpdateWithHttpInfo(appToken, v2ChatNotificationUpdateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 更新通知消息会话状态（批量）
     * 更新通知消息会话状态（批量）
     * @param appToken app_token (required)
     * @param v2ChatNotificationUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V2ChatNotificationUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V2ChatNotificationUpdateResponse> v2ChatNotificationUpdateWithHttpInfo(String appToken, V2ChatNotificationUpdateRequestBody v2ChatNotificationUpdateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v2ChatNotificationUpdateValidateBeforeCall(appToken, v2ChatNotificationUpdateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V2ChatNotificationUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新通知消息会话状态（批量） (asynchronously)
     * 更新通知消息会话状态（批量）
     * @param appToken app_token (required)
     * @param v2ChatNotificationUpdateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2ChatNotificationUpdateAsync(String appToken, V2ChatNotificationUpdateRequestBody v2ChatNotificationUpdateRequestBody, String userToken, final ApiCallback<V2ChatNotificationUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2ChatNotificationUpdateValidateBeforeCall(appToken, v2ChatNotificationUpdateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V2ChatNotificationUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2EventNotificationCreate
     * @param appToken app_token (required)
     * @param v2EventNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2EventNotificationCreateCall(String appToken, V2EventNotificationCreateRequestBody v2EventNotificationCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = v2EventNotificationCreateRequestBody;

        // create path and map variables
        String localVarPath = "/v2/event/notification/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2EventNotificationCreateValidateBeforeCall(String appToken, V2EventNotificationCreateRequestBody v2EventNotificationCreateRequestBody, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v2EventNotificationCreate(Async)");
        }
        
        // verify the required parameter 'v2EventNotificationCreateRequestBody' is set
        if (v2EventNotificationCreateRequestBody == null) {
            throw new ApiException("Missing the required parameter 'v2EventNotificationCreateRequestBody' when calling v2EventNotificationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v2EventNotificationCreateCall(appToken, v2EventNotificationCreateRequestBody, userToken, _callback);
        return localVarCall;

    }

    /**
     * 发送应用消息应用号通道
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v2EventNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return V2EventNotificationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V2EventNotificationCreateResponse v2EventNotificationCreate(String appToken, V2EventNotificationCreateRequestBody v2EventNotificationCreateRequestBody, String userToken) throws ApiException {
        ApiResponse<V2EventNotificationCreateResponse> localVarResp = v2EventNotificationCreateWithHttpInfo(appToken, v2EventNotificationCreateRequestBody, userToken);
        return localVarResp.getData();
    }

    /**
     * 发送应用消息应用号通道
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v2EventNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V2EventNotificationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V2EventNotificationCreateResponse> v2EventNotificationCreateWithHttpInfo(String appToken, V2EventNotificationCreateRequestBody v2EventNotificationCreateRequestBody, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v2EventNotificationCreateValidateBeforeCall(appToken, v2EventNotificationCreateRequestBody, userToken, null);
        Type localVarReturnType = new TypeToken<V2EventNotificationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送应用消息应用号通道 (asynchronously)
     * 通过该接口，应用可以给指定的人和分支发送系统定义的几种消息。适用于绝大多数应用消息通知场景，消息卡片中可携带链接，支持点击跳转应用详情页
     * @param appToken app_token (required)
     * @param v2EventNotificationCreateRequestBody Request Body (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2EventNotificationCreateAsync(String appToken, V2EventNotificationCreateRequestBody v2EventNotificationCreateRequestBody, String userToken, final ApiCallback<V2EventNotificationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2EventNotificationCreateValidateBeforeCall(appToken, v2EventNotificationCreateRequestBody, userToken, _callback);
        Type localVarReturnType = new TypeToken<V2EventNotificationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * LanXin+ OpenAPI
 * LanXin+ OpenAPI Platform
 *
 * 
 *
 * NOTE: This class is auto generated by LanXin+(https://openapi.lanxin.cn).
 * https://openapi.lanxin.cn
 * Do not edit the class manually.
 */


package cn.lanxin.api;

import cn.lanxin.ApiCallback;
import cn.lanxin.ApiClient;
import cn.lanxin.ApiException;
import cn.lanxin.ApiResponse;
import cn.lanxin.Configuration;
import cn.lanxin.Pair;
import cn.lanxin.ProgressRequestBody;
import cn.lanxin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cn.lanxin.models.V1AppRoamingOrgsFetchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppmgeApi {
    private ApiClient localVarApiClient;

    public AppmgeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppmgeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1AppRoamingOrgsFetch
     * @param appToken app_token (required)
     * @param pageSize 分页返回最大数据量，最大限制1000条，大于1000按1000条返回 (required)
     * @param baseVersion 增量请求的起始时间版本号，时间戳字符串，单位：微秒 (required)
     * @param userToken user_token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AppRoamingOrgsFetchCall(String appToken, Integer pageSize, String baseVersion, String userToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/roaming/orgs/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (userToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_token", userToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (baseVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_version", baseVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AppRoamingOrgsFetchValidateBeforeCall(String appToken, Integer pageSize, String baseVersion, String userToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appToken' is set
        if (appToken == null) {
            throw new ApiException("Missing the required parameter 'appToken' when calling v1AppRoamingOrgsFetch(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling v1AppRoamingOrgsFetch(Async)");
        }
        
        // verify the required parameter 'baseVersion' is set
        if (baseVersion == null) {
            throw new ApiException("Missing the required parameter 'baseVersion' when calling v1AppRoamingOrgsFetch(Async)");
        }
        

        okhttp3.Call localVarCall = v1AppRoamingOrgsFetchCall(appToken, pageSize, baseVersion, userToken, _callback);
        return localVarCall;

    }

    /**
     * 获取应用已安装到的组织列表
     * 获取应用已安装到的组织列表，支持按时间增量和分页
     * @param appToken app_token (required)
     * @param pageSize 分页返回最大数据量，最大限制1000条，大于1000按1000条返回 (required)
     * @param baseVersion 增量请求的起始时间版本号，时间戳字符串，单位：微秒 (required)
     * @param userToken user_token (optional)
     * @return V1AppRoamingOrgsFetchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public V1AppRoamingOrgsFetchResponse v1AppRoamingOrgsFetch(String appToken, Integer pageSize, String baseVersion, String userToken) throws ApiException {
        ApiResponse<V1AppRoamingOrgsFetchResponse> localVarResp = v1AppRoamingOrgsFetchWithHttpInfo(appToken, pageSize, baseVersion, userToken);
        return localVarResp.getData();
    }

    /**
     * 获取应用已安装到的组织列表
     * 获取应用已安装到的组织列表，支持按时间增量和分页
     * @param appToken app_token (required)
     * @param pageSize 分页返回最大数据量，最大限制1000条，大于1000按1000条返回 (required)
     * @param baseVersion 增量请求的起始时间版本号，时间戳字符串，单位：微秒 (required)
     * @param userToken user_token (optional)
     * @return ApiResponse&lt;V1AppRoamingOrgsFetchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1AppRoamingOrgsFetchResponse> v1AppRoamingOrgsFetchWithHttpInfo(String appToken, Integer pageSize, String baseVersion, String userToken) throws ApiException {
        okhttp3.Call localVarCall = v1AppRoamingOrgsFetchValidateBeforeCall(appToken, pageSize, baseVersion, userToken, null);
        Type localVarReturnType = new TypeToken<V1AppRoamingOrgsFetchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用已安装到的组织列表 (asynchronously)
     * 获取应用已安装到的组织列表，支持按时间增量和分页
     * @param appToken app_token (required)
     * @param pageSize 分页返回最大数据量，最大限制1000条，大于1000按1000条返回 (required)
     * @param baseVersion 增量请求的起始时间版本号，时间戳字符串，单位：微秒 (required)
     * @param userToken user_token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AppRoamingOrgsFetchAsync(String appToken, Integer pageSize, String baseVersion, String userToken, final ApiCallback<V1AppRoamingOrgsFetchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AppRoamingOrgsFetchValidateBeforeCall(appToken, pageSize, baseVersion, userToken, _callback);
        Type localVarReturnType = new TypeToken<V1AppRoamingOrgsFetchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
